// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: masterworker.proto

#include "masterworker.pb.h"
#include "masterworker.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace masterworker {

static const char* MasterWorkerService_method_names[] = {
  "/masterworker.MasterWorkerService/ExecuteTask",
};

std::unique_ptr< MasterWorkerService::Stub> MasterWorkerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MasterWorkerService::Stub> stub(new MasterWorkerService::Stub(channel));
  return stub;
}

MasterWorkerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ExecuteTask_(MasterWorkerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MasterWorkerService::Stub::ExecuteTask(::grpc::ClientContext* context, const ::masterworker::TaskRequest& request, ::masterworker::TaskResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::masterworker::TaskRequest, ::masterworker::TaskResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecuteTask_, context, request, response);
}

void MasterWorkerService::Stub::experimental_async::ExecuteTask(::grpc::ClientContext* context, const ::masterworker::TaskRequest* request, ::masterworker::TaskResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::masterworker::TaskRequest, ::masterworker::TaskResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteTask_, context, request, response, std::move(f));
}

void MasterWorkerService::Stub::experimental_async::ExecuteTask(::grpc::ClientContext* context, const ::masterworker::TaskRequest* request, ::masterworker::TaskResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecuteTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::masterworker::TaskResult>* MasterWorkerService::Stub::PrepareAsyncExecuteTaskRaw(::grpc::ClientContext* context, const ::masterworker::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::masterworker::TaskResult, ::masterworker::TaskRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecuteTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::masterworker::TaskResult>* MasterWorkerService::Stub::AsyncExecuteTaskRaw(::grpc::ClientContext* context, const ::masterworker::TaskRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecuteTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

MasterWorkerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MasterWorkerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MasterWorkerService::Service, ::masterworker::TaskRequest, ::masterworker::TaskResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MasterWorkerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::masterworker::TaskRequest* req,
             ::masterworker::TaskResult* resp) {
               return service->ExecuteTask(ctx, req, resp);
             }, this)));
}

MasterWorkerService::Service::~Service() {
}

::grpc::Status MasterWorkerService::Service::ExecuteTask(::grpc::ServerContext* context, const ::masterworker::TaskRequest* request, ::masterworker::TaskResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace masterworker

